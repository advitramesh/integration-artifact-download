@Library('piper-lib-os') _

// Define the GitHub repository URL and branch as global variables
def repoUrl = 'github.com/advitramesh/cpi-dev'
def branchName = 'main'
def gitCredentialsId = '613fd18c-2469-433c-bca6-22c48b4eb948'

node() {
    environment {
        GITHUB_APP_CREDENTIAL = credentials(gitCredentialsId)
        configOptions = ''
    }

    stage('Prepare') {
        checkout scm
        setupCommonPipelineEnvironment script: this
    }

    // Clone the GitHub Repository
    stage('Clone GitHub Repo') {
        dir('gitRepo') {
            withCredentials([usernamePassword(credentialsId: gitCredentialsId, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                // Use the credentials to clone
                sh "git clone -b ${branchName} https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} ."
            }
        }
    }

    stage('Initialize') {
        deleteDir()
        checkout scm
    }

    stage('Pipeline') {
        script {
            def config = readYaml file: 'projectPiper/.pipeline/configArtifacts.yml'
            for (def step in config.steps) {
                def configOptions = [
                    cpiApiServiceKeyCredentialsId: step.cpiApiServiceKeyCredentialsId,
                    integrationFlowId: step.integrationFlowId,
                    integrationFlowVersion: step.integrationFlowVersion,
                    downloadPath: step.downloadPath
                ]

                echo "Config Options: ${configOptions}"
                stage('IntegrationArtifactDownload Command') {
                    integrationArtifactDownload(configOptions)
                }

                def packageId = step.packageId 
                
                stage('Unzip iFlows') {
                    def zipFolder = configOptions.downloadPath
                    def destinationDir = "/var/lib/jenkins/workspace/IntegrationContent/${packageId}/${integrationFlowId}"
                    sh "mkdir -p ${destinationDir}"
                    dir(zipFolder) {
                        def zipFiles = sh(script: "ls *.zip", returnStdout: true).trim().split('\n')
                        zipFiles.each { zipFileName ->
                            def zipFilePath = "${zipFolder}/${zipFileName}"
                            echo "Unzipping ${zipFilePath} to ${destinationDir}"
                            unzip zipFile: zipFilePath, dir: destinationDir
                            sh "rm -f ${zipFilePath}"
                        }
                    }
                }

                stage('Copy iFlows to Git Repo') {
                    dir('gitRepo') {
                        sh "cp -r /var/lib/jenkins/workspace/IntegrationContent/${packageId}/${integrationFlowId}/* ."
                    }
                }

                stage('Stage the changes for commit') {
                 dir('gitRepo') {
                            // Configure user for this repository
                            sh 'git config user.email "advit.ramesh@accenture.com"'
                            sh 'git config user.name "advitramesh"'
                    
                            // Stage any changes
                            sh "git add ."
                    
                            // Commit if there are any changes
                            sh 'git diff-index --quiet HEAD || git commit -am "Commit integration content updates"'
                    
                            withCredentials([usernamePassword(credentialsId: gitCredentialsId, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                                // Fetch all branches from the remote to ensure the local repository is up-to-date
                                sh "git fetch --all"
                            
                                // Check if the branch exists on the remote
                                def remoteBranchExists = sh(script: "git ls-remote --heads https://\${GIT_USERNAME}:\${GIT_PASSWORD}@${repoUrl} ${branchName}", returnStdout: true).trim()
                            
                                if (remoteBranchExists.isEmpty()) {
                                    // If the branch does not exist on the remote, create it locally and push it
                                    sh "git checkout -b ${branchName}"
                                    sh "git push --set-upstream https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} ${branchName}"
                                } else {
                                    // If the branch exists, checkout the branch
                                    sh "git checkout ${branchName}"
                                    // Merge changes from the remote branch
                                    sh "git merge origin/${branchName} --ff-only"
                                }
                            
                                // Stage and commit changes
                                sh "git add ."
                                sh 'git diff-index --quiet HEAD || git commit -am "Commit integration content updates"'
                            
                                // Push changes to the remote branch
                                sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} ${branchName}"
                            }
                        }
                    }

            }
        }
    }
}
